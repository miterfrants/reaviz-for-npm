{"version":3,"file":"remark-codesandbox.js","sources":["../src/index.js","../src/utils.js","../src/getTemplate.js"],"sourcesContent":["'use strict';\n\nconst visit = require('unist-util-visit');\nconst is = require('unist-util-is');\nconst toString = require('mdast-util-to-string');\nconst u = require('unist-builder');\nconst { getParameters } = require('codesandbox/lib/api/define');\nconst fetch = require('isomorphic-fetch');\n\nconst getTemplate = require('./getTemplate');\nconst { parseMeta, mergeQuery, toBasePath, mergeStyle } = require('./utils');\n\nlet URLSearchParams;\nif (typeof window === 'undefined') {\n  // URLSearchParams is added to the global object in node v10\n  URLSearchParams = global.URLSearchParams || require('url').URLSearchParams;\n} else {\n  URLSearchParams = window.URLSearchParams;\n}\n\nconst DEFAULT_CUSTOM_TEMPLATES = {\n  react: {\n    extends: 'new',\n  },\n  'react-component': {\n    extends: 'new',\n    entry: 'src/App.js',\n  },\n};\n\nconst PLUGIN_ONLY_QUERY_PARAMS = ['overrideEntry', 'entry', 'style'];\n\nfunction codesandbox(options = {}) {\n  const templates = new Map();\n  const mode = options.mode || 'meta';\n  const customTemplates = {\n    ...DEFAULT_CUSTOM_TEMPLATES,\n    ...(options.customTemplates || {}),\n  };\n  const defaultQuery =\n    mode === 'iframe'\n      ? {\n          fontsize: '14px',\n          hidenavigation: 1,\n          theme: 'dark',\n        }\n      : undefined;\n  const autoDeploy = options.autoDeploy || false;\n\n  let baseQuery = defaultQuery;\n\n  if (typeof options.query !== 'undefined') {\n    baseQuery = options.query;\n  } else if (typeof options.iframeQuery !== 'undefined') {\n    // DEPRECATED: To support the legacy iframeQuery key\n    console.warn(\n      `options.iframeQuery is now deprecated and will be removed in the upcoming version, please use options.query instead.`\n    );\n    baseQuery = options.iframeQuery;\n  }\n\n  return async function transformer(tree, file) {\n    let title;\n    const codes = [];\n\n    // Walk the tree once and record everything we need\n    visit(tree, (node, index, parent) => {\n      if (!title && is(node, ['heading', { depth: 1 }])) {\n        title = toString(node);\n      } else if (is(node, 'code')) {\n        codes.push([node, index, parent]);\n      }\n    });\n\n    for (const [node, _, parent] of codes) {\n      const meta = parseMeta(node.meta || '');\n      const sandboxMeta = meta.codesandbox;\n\n      // No `codesandbox` meta set, skipping\n      if (!sandboxMeta) {\n        continue;\n      }\n\n      const [templateID, queryString] = sandboxMeta.split('?');\n\n      const template = await getTemplate(\n        templates,\n        templateID,\n        customTemplates,\n        file\n      );\n\n      template.title = title || template.title;\n\n      const query = mergeQuery(baseQuery, template.query, queryString);\n\n      const entryPath = query.has('entry')\n        ? toBasePath(query.get('entry'))\n        : template.entry;\n\n      // If there is no predefined `module` key, then we assign it to the entry file\n      if (!query.has('module')) {\n        query.set(\n          'module',\n          // `entry` doesn't start with leading slash, but `module` requires it\n          entryPath.startsWith('/') ? entryPath : `/${entryPath}`\n        );\n      }\n\n      const overrideEntry = query.get('overrideEntry');\n\n      const style = query.get('style') || '';\n\n      // Remove any options that are only for the plugin and not relevant to CodeSandbox\n      PLUGIN_ONLY_QUERY_PARAMS.forEach((param) => {\n        query.delete(param);\n      });\n\n      let entryFileContent = template.files[entryPath].content;\n      if (!overrideEntry) {\n        entryFileContent = node.value;\n      } else if (overrideEntry !== 'false') {\n        const [overrideRangeStart, overrideRangeEnd] = overrideEntry.split('-');\n\n        const lines = entryFileContent.split('\\n');\n        entryFileContent = [\n          ...lines.slice(0, Number(overrideRangeStart) - 1),\n          node.value,\n          ...(overrideRangeEnd === ''\n            ? []\n            : lines.slice(Number(overrideRangeEnd))),\n        ].join('\\n');\n      }\n\n      const parameters = getParameters({\n        files: {\n          ...template.files,\n          [entryPath]: { content: entryFileContent },\n        },\n      });\n\n      let url;\n\n      if (autoDeploy) {\n        const { sandbox_id } = await fetch(\n          'https://codesandbox.io/api/v1/sandboxes/define',\n          {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ parameters, json: 1 }),\n          }\n        ).then((res) => res.json());\n\n        url = `https://codesandbox.io/s/${sandbox_id}?${query.toString()}`;\n      } else {\n        url = `https://codesandbox.io/api/v1/sandboxes/define?${new URLSearchParams(\n          {\n            parameters,\n            query,\n          }\n        ).toString()}`;\n      }\n\n      switch (mode) {\n        case 'button': {\n          const button = u('paragraph', [\n            u('link', { url }, [\n              u('image', {\n                url: 'https://codesandbox.io/static/img/play-codesandbox.svg',\n                alt: 'Edit on CodeSandbox',\n              }),\n            ]),\n          ]);\n\n          // Insert the button directly after the code block\n          const index = parent.children.indexOf(node);\n          parent.children.splice(index + 1, 0, button);\n\n          break;\n        }\n        case 'iframe': {\n          // Construct the iframe AST\n          const iframe = u('html', {\n            value: `<iframe\n  src=\"${autoDeploy ? url.replace('/s/', '/embed/') : `${url}&embed=1`}\"\n  style=\"${mergeStyle(\n    'width:100%; height:500px; border:0; border-radius:4px; overflow:hidden;',\n    style\n  )}\"\n  title=\"${template.title || ''}\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>`,\n          });\n\n          // Replace the code block with the iframe\n          const index = parent.children.indexOf(node);\n          parent.children.splice(index, 1, iframe);\n\n          break;\n        }\n        case 'meta':\n        default: {\n          // TODO: We might still want to make this happen regardless of the mode?\n          node.data = node.data || {};\n          node.data.hProperties = node.data.hProperties || {};\n\n          node.data.codesandboxUrl = url;\n          node.data.hProperties.dataCodesandboxUrl = url;\n\n          break;\n        }\n      }\n    }\n  };\n}\n\nmodule.exports = codesandbox;\n","/**\n * @typedef {string | { [key: string]: string } | URLSearchParams | undefined} Query\n */\n\n/**\n * Parse the meta string into object\n *\n * @param {string} metaString\n * @return {[key: string]: string}\n */\nfunction parseMeta(metaString) {\n  const meta = {};\n\n  metaString.split(' ').forEach((str) => {\n    const equalIndex = str.indexOf('=');\n\n    if (equalIndex > 0) {\n      const key = str.slice(0, equalIndex);\n      const value = str.slice(equalIndex + 1);\n\n      meta[key] = value;\n    }\n  });\n\n  return meta;\n}\n\n/**\n * Merge several queries into one URLSearchParams\n *\n * @param {Query} baseQuery\n * @param {Query[]} queries\n * @return {URLSearchParams}\n */\nfunction mergeQuery(baseQuery, ...queries) {\n  const query = new URLSearchParams();\n\n  // Interesting that chaining multiple URLSearchParams calls returns a single one\n  // So baseQuery could be either `string`, `object`, `URLSearchParams`, or even `undefined`\n  new URLSearchParams(baseQuery).forEach((value, key) => {\n    query.set(key, value);\n  });\n\n  queries.forEach((params) => {\n    new URLSearchParams(params).forEach((value, key) => {\n      query.set(key, value);\n    });\n  });\n\n  return query;\n}\n\n/**\n * Convert relative path to unified base path.\n *\n * @param {string} path The path of the entry file\n * @return {string} The bast path\n */\nfunction toBasePath(path) {\n  if (path.startsWith('./')) {\n    return path.slice(2);\n  } else if (path.startsWith('/')) {\n    return path.slice(1);\n  }\n\n  return path;\n}\n\n/**\n * Merge style strings into one\n *\n * @param {string} baseStyle\n * @param {string} style\n * @return {string}\n */\nfunction mergeStyle(baseStyle, style) {\n  function toEntries(styleString) {\n    return styleString\n      .trim()\n      .split(';')\n      .map((entry) => entry.trim())\n      .filter(Boolean)\n      .map((entry) => entry.split(':').map((value) => value.trim()));\n  }\n\n  const baseStyleEntries = toEntries(baseStyle);\n  const styleEntries = toEntries(style);\n\n  const mergedObject = Object.fromEntries(\n    baseStyleEntries.concat(styleEntries)\n  );\n  const mergedEntries = Object.entries(mergedObject);\n\n  return mergedEntries.map((entry) => entry.join(':') + ';').join(' ');\n}\n\nmodule.exports = {\n  parseMeta,\n  mergeQuery,\n  toBasePath,\n  mergeStyle,\n};\n","const fetch = require('isomorphic-fetch');\n\nfunction mergeTemplates(baseTemplate, targetTemplate) {\n  return {\n    ...baseTemplate,\n    ...targetTemplate,\n    files: {\n      ...(baseTemplate.files || {}),\n      ...(targetTemplate.files || {}),\n    },\n  };\n}\n\nfunction getFilePath(mappings, shortid) {\n  const dir = mappings[shortid];\n\n  if (!dir) {\n    return null;\n  }\n\n  return (\n    [getFilePath(mappings, dir.directory_shortid), dir.title]\n      .filter(Boolean)\n      // CodeSandbox expects posix path\n      .join('/')\n  );\n}\n\n/**\n * `templateID` can be either:\n *  - sandbox id\n *  - `file:` path\n *  - custom sandbox id\n */\nasync function getTemplate(templateID, customTemplates, file) {\n  if (customTemplates[templateID]) {\n    const baseTemplate = await getTemplate(\n      customTemplates[templateID].extends,\n      customTemplates\n    );\n\n    const template = mergeTemplates(baseTemplate, customTemplates[templateID]);\n\n    return template;\n  }\n\n  let template;\n\n  if (templateID.startsWith('file:')) {\n    if (typeof window !== 'undefined') {\n      throw new Error(\n        '\"file:\" template is not supported in browser environment!'\n      );\n    }\n\n    const directoryPath = templateID.slice('file:'.length);\n    template = await require('./fsTemplate')(\n      directoryPath,\n      file ? file.dirname : process.cwd()\n    );\n  } else {\n    try {\n      let response = await fetch(\n        `https://codesandbox.io/api/v1/sandboxes/${templateID}`\n      );\n      response = await response.json();\n\n      template = response.data;\n    } catch (err) {\n      console.error(`Failed to get the sandbox template: ${templateID}`);\n      throw err;\n    }\n\n    // Construct files/directories mappings\n    const mappings = {};\n\n    (template.directories || []).forEach((dir) => {\n      mappings[dir.shortid] = dir;\n    });\n    (template.modules || []).forEach((file) => {\n      mappings[file.shortid] = file;\n    });\n\n    // Construct files mappings\n    const files = {};\n\n    (template.modules || []).forEach((file) => {\n      const path = getFilePath(mappings, file.shortid);\n\n      files[path] = { content: file.code };\n    });\n\n    template.files = files;\n  }\n\n  return template;\n}\n\nmodule.exports = async function getTemplateFromCache(\n  templates,\n  templateID,\n  customTemplates,\n  file\n) {\n  if (!templates.has(templateID)) {\n    templates.set(templateID, getTemplate(templateID, customTemplates, file));\n  }\n\n  return templates.get(templateID);\n};\n"],"names":["s","pact","value","observer","URLSearchParams","getParameters","require$$0","mergeStyle","baseStyle","style","toEntries","styleString","trim","split","map","entry","filter","Boolean","baseStyleEntries","styleEntries","mergedObject","Object","fromEntries","concat","entries","join","window","DEFAULT_CUSTOM_TEMPLATES","react","PLUGIN_ONLY_QUERY_PARAMS","options","templates","Map","mode","customTemplates","autoDeploy","baseQuery","fontsize","hidenavigation","theme","undefined","query","iframeQuery","console","warn","tree","file","title","codes","visit","node","index","parent","is","depth","toString","push","_cycle","result","body","values","metaString","meta","sandboxMeta","forEach","str","equalIndex","indexOf","key","slice","codesandbox","queryString","templateID","has","set","getTemplate","template","startsWith","Error","mappings","directories","dir","shortid","modules","files","path","getFilePath","directory_shortid","content","code","fetch","response","json","data","err","error","baseTemplate","targetTemplate","mergeTemplates","get","button","u","url","alt","children","splice","iframe","replace","hProperties","codesandboxUrl","dataCodesandboxUrl","queries","params","mergeQuery","entryPath","overrideEntry","param","entryFileContent","overrideRangeStart","overrideRangeEnd","lines","Number","parameters","method","headers","JSON","stringify","then","res","sandbox_id"],"mappings":"+lBAqBO,wBACIA,0DAQsBC,+BAIlBC,mEAKbD,UACME,iSA5BY,8DAAhBC,EANIC,EAAkBC,EAAlBD,cAImCE,ECiE3C,SAAoBC,EAAWC,YACpBC,EAAUC,UACVA,EACJC,OACAC,MAAM,KACNC,IAAI,SAACC,UAAUA,EAAMH,SACrBI,OAAOC,SACPH,IAAI,SAACC,UAAUA,EAAMF,MAAM,KAAKC,IAAI,SAACZ,UAAUA,EAAMU,eAGpDM,EAAmBR,EAAUF,GAC7BW,EAAeT,EAAUD,GAEzBW,EAAeC,OAAOC,YAC1BJ,EAAiBK,OAAOJ,WAEJE,OAAOG,QAAQJ,GAEhBN,IAAI,SAACC,UAAUA,EAAMU,KAAK,KAAO,MAAKA,KAAK,MD5EhErB,EAAkBsB,OAAOtB,gBAG3B,IAAMuB,EAA2B,CAC/BC,MAAO,SACI,yBAEQ,SACR,MACTb,MAAO,eAILc,EAA2B,CAAC,gBAAiB,QAAS,wBAE5D,SAAqBC,YAAAA,IAAAA,EAAU,QACvBC,EAAY,IAAIC,IAChBC,EAAOH,EAAQG,MAAQ,OACvBC,OACDP,KACCG,EAAQI,iBAAmB,IAU3BC,EAAaL,EAAQK,aAAc,EAErCC,EATO,WAATH,EACI,CACEI,SAAU,OACVC,eAAgB,EAChBC,MAAO,aAETC,cAKuB,IAAlBV,EAAQW,MACjBL,EAAYN,EAAQW,WACoB,IAAxBX,EAAQY,cAExBC,QAAQC,6HAGRR,EAAYN,EAAQY,sBAGYG,EAAMC,WAClCC,EACEC,EAAQ,GAGdC,EAAMJ,EAAM,SAACK,EAAMC,EAAOC,IACnBL,GAASM,EAAGH,EAAM,CAAC,UAAW,CAAEI,MAAO,KAC1CP,EAAQQ,EAASL,GACRG,EAAGH,EAAM,SAClBF,EAAMQ,KAAK,CAACN,EAAMC,EAAOC,uFAmFtBK,kFAQJC,wEAWKzD,gSA5EkB0D,gBACpB,kBACAF,uKA0GKG,gCAlIqBZ,kBChEjBa,EACXC,ED+DQZ,OAASE,OAEbW,GClEOF,EDiEUX,EAAKY,MAAQ,GChElCA,EAAO,GAEbD,EAAWhD,MAAM,KAAKmD,QAAQ,SAACC,OACvBC,EAAaD,EAAIE,QAAQ,QAE3BD,EAAa,EAAG,KACZE,EAAMH,EAAII,MAAM,EAAGH,GACnBhE,EAAQ+D,EAAII,MAAMH,EAAa,GAErCJ,EAAKM,GAAOlE,KAIT4D,GDoDsBQ,eAGpBP,SAI6BA,EAAYlD,MAAM,KAAjC0D,uCEgBvBxC,EACAyC,EACAtC,EACAY,cAEKf,EAAU0C,IAAID,IACjBzC,EAAU2C,IAAIF,WAvEHG,EAAYH,EAAYtC,EAAiBY,6BAYlD8B,oCAEAJ,EAAWK,WAAW,eAEhB,IAAIC,MACR,mFAuBEC,EAAW,IAEhBH,EAASI,aAAe,IAAIhB,QAAQ,SAACiB,GACpCF,EAASE,EAAIC,SAAWD,KAEzBL,EAASO,SAAW,IAAInB,QAAQ,SAAClB,GAChCiC,EAASjC,EAAKoC,SAAWpC,QAIrBsC,EAAQ,IAEbR,EAASO,SAAW,IAAInB,QAAQ,SAAClB,OAC1BuC,EA1EZ,SAASC,EAAYP,EAAUG,OACvBD,EAAMF,EAASG,UAEhBD,EAKH,CAACK,EAAYP,EAAUE,EAAIM,mBAAoBN,EAAIlC,OAChD/B,OAAOC,SAEPQ,KAAK,KAPD,KAsEQ6D,CAAYP,EAAUjC,EAAKoC,SAExCE,EAAMC,GAAQ,CAAEG,QAAS1C,EAAK2C,QAGhCb,EAASQ,MAAQA,6CA9BMM,6CACwBlB,kBADzCmB,0BAGaA,EAASC,yBAE1BhB,GAFAe,KAEoBE,8EACbC,SACPnD,QAAQoD,6CAA6CvB,GAC/CsB,iFAyBHlB,IAAAA,wBA5DH1C,EAAgBsC,0BACSG,EACzBzC,EAAgBsC,WAChBtC,kBAFI8D,OAKApB,EAvCV,SAAwBoB,EAAcC,eAE/BD,KACAC,GACHb,WACMY,EAAaZ,OAAS,MACtBa,EAAeb,OAAS,MAiCbc,CAAeF,EAAc9D,EAAgBsC,gBAEvDI,2FA8DmBD,CAAYH,EAAYtC,oBAG7CH,EAAUoE,IAAI3B,uCFvBMG,CACrB5C,OAEAG,kBAHI0C,6BA8EE3C,OACD,aACGmE,EAASC,EAAE,YAAa,CAC5BA,EAAE,OAAQ,CAAEC,IAAAA,GAAO,CACjBD,EAAE,QAAS,CACTC,IAAK,yDACLC,IAAK,4BAMLpD,EAAQC,EAAOoD,SAASrC,QAAQjB,eACtCE,EAAOoD,SAASC,OAAOtD,EAAQ,EAAG,EAAGiD,OAIlC,aAEGM,EAASL,EAAE,OAAQ,CACvBnG,0BACHiC,EAAamE,EAAIK,QAAQ,MAAO,WAAgBL,6BAC9C/F,EACP,0EACAE,mBAEOmE,EAAS7B,OAAS,6OAObI,EAAQC,EAAOoD,SAASrC,QAAQjB,eACtCE,EAAOoD,SAASC,OAAOtD,EAAO,EAAGuD,OAI9B,sBAGHxD,EAAK2C,KAAO3C,EAAK2C,MAAQ,GACzB3C,EAAK2C,KAAKe,YAAc1D,EAAK2C,KAAKe,aAAe,GAEjD1D,EAAK2C,KAAKgB,eAAiBP,OAC3BpD,EAAK2C,KAAKe,YAAYE,mBAAqBR,IApH/C1B,EAAS7B,MAAQA,GAAS6B,EAAS7B,UClCrBsC,EDoCR5C,EC5DZ,SAAoBL,OACZK,EAAQ,IAAIrC,oBAIdA,gBAAgBgC,GAAW4B,QAAQ,SAAC9D,EAAOkE,GAC7C3B,EAAMiC,IAAIN,EAAKlE,gCANe6G,mCAAAA,2BAShCA,EAAQ/C,QAAQ,SAACgD,OACX5G,gBAAgB4G,GAAQhD,QAAQ,SAAC9D,EAAOkE,GAC1C3B,EAAMiC,IAAIN,EAAKlE,OAIZuC,ED6CWwE,CAAW7E,EAAWwC,EAASnC,MAAO8B,GAE9C2C,EAAYzE,EAAMgC,IAAI,UCtCdY,EDuCC5C,EAAM0D,IAAI,UCtCpBtB,WAAW,MACXQ,EAAKhB,MAAM,GACTgB,EAAKR,WAAW,KAClBQ,EAAKhB,MAAM,GAGbgB,EDiCCT,EAAS7D,MAGR0B,EAAMgC,IAAI,WACbhC,EAAMiC,IACJ,SAEAwC,EAAUrC,WAAW,KAAOqC,MAAgBA,OAI1CC,EAAgB1E,EAAM0D,IAAI,iBAE1B1F,EAAQgC,EAAM0D,IAAI,UAAY,GAGpCtE,EAAyBmC,QAAQ,SAACoD,GAChC3E,SAAa2E,SAGXC,EAAmBzC,EAASQ,MAAM8B,GAAW1B,WAC5C2B,GAEE,GAAsB,UAAlBA,EAA2B,OACWA,EAActG,MAAM,KAA5DyG,OAAoBC,OAErBC,EAAQH,EAAiBxG,MAAM,MACrCwG,EAAmB,UACdG,EAAMnD,MAAM,EAAGoD,OAAOH,GAAsB,IAC/CpE,EAAKhD,OACoB,KAArBqH,EACA,GACAC,EAAMnD,MAAMoD,OAAOF,KACvB9F,KAAK,YAXP4F,EAAmBnE,EAAKhD,UAqBtBoG,EAPEoB,EAAarH,EAAc,CAC/B+E,WACKR,EAASQ,cACX8B,GAAY,CAAE1B,QAAS6B,yBAMxBlF,yBAC2BuD,EAC3B,iDACA,CACEiC,OAAQ,OACRC,QAAS,gBAAkB,oBAC3BjE,KAAMkE,KAAKC,UAAU,CAAEJ,WAAAA,EAAY9B,KAAM,MAE3CmC,KAAK,SAACC,UAAQA,EAAIpC,2BAEpBU,gCATQ2B,eASwCxF,EAAMc,aAEtD+C,oDAAwD,IAAIlG,EAC1D,CACEsH,WAAAA,EACAjF,MAAAA,IAEFc"}