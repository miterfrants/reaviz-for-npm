(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react/jsx-runtime'), require('react'), require('classnames'), require('rdk'), require('framer-motion'), require('focus-trap-react'), require('create-global-state-hook')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react/jsx-runtime', 'react', 'classnames', 'rdk', 'framer-motion', 'focus-trap-react', 'create-global-state-hook'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.realayers = {}, global.jsxRuntime, global.react, global.classNames, global.rdk, global.framerMotion, global.FocusTrap, global.creteGlobalStateHook));
}(this, (function (exports, jsxRuntime, react, classNames, rdk, framerMotion, FocusTrap, creteGlobalStateHook) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);
    var FocusTrap__default = /*#__PURE__*/_interopDefaultLegacy(FocusTrap);
    var creteGlobalStateHook__default = /*#__PURE__*/_interopDefaultLegacy(creteGlobalStateHook);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    /**
     * Creates a global state singleton.
     */
    const createStateHook = () => {
        let tooltips = [];
        function addTooltip(newTip) {
            tooltips = [...tooltips, newTip];
        }
        function deactivateTooltip(tooltip) {
            const idx = tooltips.indexOf(tooltip);
            if (idx > -1) {
                const tip = tooltips[idx];
                tip(false);
                tooltips.splice(idx, 1);
            }
        }
        function deactivateAllTooltips() {
            tooltips.forEach(ref => ref(false));
            tooltips = [];
        }
        return () => {
            const [state, setState] = react.useState([]);
            react.useEffect(() => {
                setState(tooltips);
            }, []);
            return {
                tooltips: state,
                deactivateAllTooltips,
                deactivateTooltip,
                addTooltip
            };
        };
    };
    const useTooltipState = createStateHook();

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = ".Tooltip-module_tooltip__2A0zj {\n  background: var(--color-tooltip);\n  border-radius: 5px;\n  color: var(--color-on-tooltip);\n  padding: 7px;\n  white-space: nowrap;\n  text-align: center;\n  will-change: transform, opacity;\n}\n\n.Tooltip-module_disablePointer__1V598 {\n  pointer-events: none;\n}\n";
    var css = {"tooltip":"Tooltip-module_tooltip__2A0zj","disablePointer":"Tooltip-module_disablePointer__1V598"};
    styleInject(css_248z);

    const Tooltip = (_a) => {
        var { className, children, content, disabled = false, enterDelay = 0, leaveDelay = 200, placement = 'top', trigger = 'hover', visible = false, followCursor = false, closeOnClick = false, closeOnEscape = true, closeOnBodyClick = true, pointerEvents = 'none' } = _a, rest = __rest(_a, ["className", "children", "content", "disabled", "enterDelay", "leaveDelay", "placement", "trigger", "visible", "followCursor", "closeOnClick", "closeOnEscape", "closeOnBodyClick", "pointerEvents"]);
        const { addTooltip, deactivateTooltip, deactivateAllTooltips } = useTooltipState();
        const [internalVisible, setInternalVisible] = react.useState(visible);
        const timeout = react.useRef();
        const mounted = react.useRef(false);
        const ref = react.useRef(setInternalVisible);
        react.useEffect(() => {
            // componentDidUpdateLogic style logic
            if (!mounted.current) {
                mounted.current = true;
            }
            else {
                setInternalVisible(visible);
            }
            const curRef = ref.current;
            return () => {
                clearTimeout(timeout.current);
                deactivateTooltip(curRef);
            };
        }, [deactivateTooltip, visible]);
        return (jsxRuntime.jsx(rdk.ConnectedOverlay, Object.assign({}, rest, { placement: placement, trigger: trigger, followCursor: followCursor, portalClassName: classNames__default['default']({
                [css.disablePointer]: pointerEvents === 'none'
            }), open: internalVisible, closeOnBodyClick: closeOnBodyClick, closeOnEscape: closeOnEscape, content: () => {
                const contentChildren = typeof content === 'function' ? content() : content;
                if (!contentChildren) {
                    return null;
                }
                return (jsxRuntime.jsx(framerMotion.motion.div, Object.assign({ className: classNames__default['default'](css.tooltip, className), initial: {
                        opacity: 0,
                        scale: 0.3,
                        transition: {
                            when: 'beforeChildren'
                        }
                    }, animate: {
                        opacity: 1,
                        scale: 1,
                        transition: {
                            when: 'beforeChildren'
                        }
                    }, exit: { opacity: 0, scale: 0.3 }, onClick: () => {
                        if (closeOnClick) {
                            deactivateAllTooltips();
                        }
                    } }, { children: contentChildren }), void 0));
            }, onOpen: () => {
                if (!internalVisible) {
                    clearTimeout(timeout.current);
                    timeout.current = setTimeout(() => {
                        if (!disabled) {
                            deactivateAllTooltips();
                            setInternalVisible(true);
                            addTooltip(ref.current);
                        }
                    }, enterDelay);
                }
            }, onClose: () => {
                clearTimeout(timeout.current);
                timeout.current = setTimeout(() => {
                    deactivateTooltip(ref.current);
                }, leaveDelay);
            } }, { children: children }), void 0));
    };
    Tooltip.defaultProps = {
        disabled: false,
        enterDelay: 0,
        leaveDelay: 200,
        placement: 'top',
        trigger: 'hover',
        visible: false,
        followCursor: false,
        closeOnClick: false,
        closeOnEscape: true,
        closeOnBodyClick: true,
        pointerEvents: 'none'
    };

    var css_248z$1 = ".Popover-module_popover__37iIL {\n  background: var(--color-popover);\n  border-radius: 2px;\n  color: var(--color-on-popover);\n  padding: 14px;\n  will-change: transform, opacity;\n}\n\n  .Popover-module_popover__37iIL.Popover-module_disablePadding__3vGRW {\n    padding: 0;\n  }\n";
    var css$1 = {"popover":"Popover-module_popover__37iIL","disablePadding":"Popover-module_disablePadding__3vGRW"};
    styleInject(css_248z$1);

    const Popover = (_a) => {
        var { closeOnEscape = true, closeOnBodyClick = true, trigger = 'click', leaveDelay = 200, children, content, className, disablePadding, popoverStyle, popoverClassName } = _a, rest = __rest(_a, ["closeOnEscape", "closeOnBodyClick", "trigger", "leaveDelay", "children", "content", "className", "disablePadding", "popoverStyle", "popoverClassName"]);
        const id = rdk.useId();
        return (jsxRuntime.jsx(Tooltip, Object.assign({}, rest, { trigger: trigger, pointerEvents: "initial", leaveDelay: leaveDelay, className: classNames__default['default'](css$1.popover, {
                [css$1.disablePadding]: disablePadding
            }), content: () => {
                const isContentFunction = typeof content === 'function';
                const children = isContentFunction ? content() : content;
                if (!children) {
                    return null;
                }
                return (jsxRuntime.jsx(FocusTrap__default['default'], Object.assign({ focusTrapOptions: {
                        escapeDeactivates: true,
                        clickOutsideDeactivates: true,
                        fallbackFocus: `#${id}`
                    } }, { children: jsxRuntime.jsx("div", Object.assign({ id: id, "tab-index": "-1", stlye: popoverStyle, className: popoverClassName }, { children: children }), void 0) }), void 0));
            } }, { children: children }), void 0));
    };
    Popover.defaultProps = {
        closeOnEscape: true,
        closeOnBodyClick: true,
        trigger: 'click',
        leaveDelay: 200
    };

    var css_248z$2 = ".Dialog-module_dialog__3eIDR {\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  will-change: transform, opacity;\n}\n\n  .Dialog-module_dialog__3eIDR.Dialog-module_disableHeader__3cwG5 .Dialog-module_content__1qwq9 {\n      padding: 20px;\n    }\n\n  .Dialog-module_dialog__3eIDR.Dialog-module_disablePadding__1FoaN .Dialog-module_content__1qwq9,\n    .Dialog-module_dialog__3eIDR.Dialog-module_disablePadding__1FoaN .Dialog-module_header__292Tt {\n      padding: 0;\n    }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_inner__22ThE {\n    background: var(--color-dialog);\n    color: var(--color-on-dialog);\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    outline: 0;\n    pointer-events: auto;\n    max-width: 80vw;\n    max-height: 80vh;\n    overflow: auto;\n  }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt {\n    display: flex;\n    padding: 20px 20px 10px 20px;\n  }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt .Dialog-module_headerText__2LqjF {\n      margin: 0;\n      padding: 0;\n      flex: 1;\n      display: inline-flex;\n    }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt .Dialog-module_closeButton__LNtbX {\n      margin: 0 0 0 15px;\n      opacity: 0.8;\n      height: auto;\n      width: auto;\n      min-width: auto;\n      min-height: auto;\n      display: inline-flex;\n      padding: 0;\n      background: none;\n      border: none;\n      cursor: pointer;\n      align-items: center;\n      color: var(--color-on-dialog);\n      font-size: 16px;\n    }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt .Dialog-module_closeButton__LNtbX:focus {\n        outline: none;\n      }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_content__1qwq9 {\n    padding: 10px 20px 20px 20px;\n    flex: auto;\n    overflow: auto;\n  }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_footer__10elA {\n    display: flex;\n    padding: 20px 20px 10px 20px;\n  }\n";
    var css$2 = {"dialog":"Dialog-module_dialog__3eIDR","disableHeader":"Dialog-module_disableHeader__3cwG5","content":"Dialog-module_content__1qwq9","disablePadding":"Dialog-module_disablePadding__1FoaN","header":"Dialog-module_header__292Tt","inner":"Dialog-module_inner__22ThE","headerText":"Dialog-module_headerText__2LqjF","closeButton":"Dialog-module_closeButton__LNtbX","footer":"Dialog-module_footer__10elA"};
    styleInject(css_248z$2);

    const DialogHeader = ({ children, className, showCloseButton, onClose }) => (jsxRuntime.jsxs("header", Object.assign({ className: classNames__default['default'](css$2.header, className) }, { children: [jsxRuntime.jsx("h1", Object.assign({ className: css$2.headerText }, { children: children }), void 0),
            showCloseButton && (jsxRuntime.jsx("button", Object.assign({ type: "button", className: css$2.closeButton, onClick: onClose }, { children: "\u2715" }), void 0))] }), void 0));

    const Dialog = ({ children, open, className, innerClassName, header, headerElement, footer, onClose, size, disablePadding, hasBackdrop, showCloseButton, closeOnBackdropClick, closeOnEscape }) => {
        const id = rdk.useId();
        return (jsxRuntime.jsx(rdk.GlobalOverlay, Object.assign({ open: open, hasBackdrop: hasBackdrop, closeOnEscape: closeOnEscape, closeOnBackdropClick: closeOnBackdropClick, onClose: onClose }, { children: ({ overlayIndex }) => (jsxRuntime.jsx(FocusTrap__default['default'], Object.assign({ focusTrapOptions: {
                    clickOutsideDeactivates: true,
                    escapeDeactivates: true,
                    fallbackFocus: `#${id}-content`
                } }, { children: jsxRuntime.jsx("div", Object.assign({ id: id, "tab-index": "-1" }, { children: jsxRuntime.jsx(framerMotion.motion.div, Object.assign({ initial: { opacity: 0, y: '-20%' }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: '20%' }, transition: { duration: 0.5, ease: [0.04, 0.62, 0.23, 0.98] }, style: { zIndex: overlayIndex }, className: classNames__default['default'](css$2.dialog, className, {
                            [css$2.disableHeader]: !header,
                            [css$2.disablePadding]: disablePadding
                        }) }, { children: jsxRuntime.jsxs("div", Object.assign({ className: classNames__default['default'](css$2.inner, innerClassName), style: { width: size } }, { children: [(header || headerElement) && (jsxRuntime.jsx(rdk.CloneElement, Object.assign({ element: headerElement, showCloseButton: showCloseButton, onClose: onClose }, { children: header }), void 0)),
                                jsxRuntime.jsx("section", Object.assign({ id: `${id}-content`, className: css$2.content }, { children: typeof children === 'function' ? children() : children }), void 0),
                                footer && jsxRuntime.jsx("footer", Object.assign({ className: css$2.footer }, { children: footer }), void 0)] }), void 0) }), void 0) }), void 0) }), void 0)) }), void 0));
    };
    Dialog.defaultProps = {
        size: '50%',
        disablePadding: false,
        hasBackdrop: true,
        showCloseButton: true,
        closeOnBackdropClick: true,
        closeOnEscape: true,
        headerElement: jsxRuntime.jsx(DialogHeader, {}, void 0)
    };

    const useDialog = (prop) => {
        const { open, onClose } = prop || {};
        const [internalOpen, setInternalOpen] = react.useState(open);
        react.useEffect(() => {
            setInternalOpen(open);
        }, [open]);
        const onCloseInternal = react.useCallback(() => {
            setInternalOpen(false);
            onClose === null || onClose === void 0 ? void 0 : onClose();
        }, [onClose]);
        const onToggleOpen = () => {
            setInternalOpen(!open);
        };
        const Component = react.useCallback((props) => (jsxRuntime.jsx(Dialog, Object.assign({}, props, { open: internalOpen, onClose: onCloseInternal }), void 0)), [internalOpen, onCloseInternal]);
        return {
            isOpen: internalOpen,
            setOpen: setInternalOpen,
            toggleOpen: onToggleOpen,
            Dialog: Component
        };
    };

    const variants = {
        start: {
            initial: {
                x: '-100%'
            },
            animate: {
                x: '0%'
            }
        },
        end: {
            initial: {
                x: '100%'
            },
            animate: {
                x: '0%'
            }
        },
        top: {
            initial: {
                y: '-100%'
            },
            animate: {
                y: '0%'
            }
        },
        bottom: {
            initial: {
                y: '100%'
            },
            animate: {
                y: '0%'
            }
        }
    };

    var css_248z$3 = ".Drawer-module_drawer__17v12 {\n  position: fixed;\n  overflow-y: auto;\n  overflow-x: hidden;\n  background: var(--color-drawer);\n  color: var(--color-on-drawer);\n}\n\n  .Drawer-module_drawer__17v12:not(.Drawer-module_disablePadding__EhMMY) .Drawer-module_content__Ky_ZR {\n      padding: 20px 30px;\n    }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_header__UZcJu {\n    display: flex;\n    align-items: center;\n    padding: 20px 30px;\n  }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_header__UZcJu > h1 {\n      margin: 0;\n      flex: 1;\n    }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_closeButton__3FEQA {\n    opacity: 0.8;\n    height: auto;\n    width: auto;\n    min-width: auto;\n    min-height: auto;\n    padding: 0;\n    background: none;\n    border: none;\n    cursor: pointer;\n    color: var(--color-on-drawer);\n    font-size: 16px;\n  }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_closeButton__3FEQA:focus {\n      outline: none;\n    }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_closeButton__3FEQA.Drawer-module_headerlessCloseButton__UEH_K {\n      position: absolute;\n      top: 20px;\n      right: 20px;\n    }\n\n  .Drawer-module_drawer__17v12.Drawer-module_start__qtGuQ,\n  .Drawer-module_drawer__17v12.Drawer-module_end__quCxe {\n    top: 0;\n    bottom: 0;\n    height: 100%;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_start__qtGuQ {\n    left: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_end__quCxe {\n    right: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_top__1xtVG,\n  .Drawer-module_drawer__17v12.Drawer-module_bottom__DKQ-u {\n    width: 100%;\n    left: 0;\n    right: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_top__1xtVG {\n    top: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_bottom__DKQ-u {\n    bottom: 0;\n  }\n\n[dir=\"ltr\"] :export {\n  start-top: Drawer-module_start__qtGuQ;\n  start-left: Drawer-module_start__qtGuQ;\n}\n\n[dir=\"rtl\"] :export {\n  start-top: Drawer-module_start__qtGuQ;\n  start-right: Drawer-module_start__qtGuQ;\n}\n\n[dir=\"ltr\"] :export {\n  end-bottom: Drawer-module_end__quCxe;\n  end-right: Drawer-module_end__quCxe;\n}\n\n[dir=\"rtl\"] :export {\n  end-bottom: Drawer-module_end__quCxe;\n  end-left: Drawer-module_end__quCxe;\n}\n";
    var css$3 = {"drawer":"Drawer-module_drawer__17v12","disablePadding":"Drawer-module_disablePadding__EhMMY","content":"Drawer-module_content__Ky_ZR","header":"Drawer-module_header__UZcJu","closeButton":"Drawer-module_closeButton__3FEQA","headerlessCloseButton":"Drawer-module_headerlessCloseButton__UEH_K","top":"Drawer-module_top__1xtVG","bottom":"Drawer-module_bottom__DKQ-u"};
    styleInject(css_248z$3);

    const DrawerHeader = ({ children, className, showCloseButton, onClose }) => (jsxRuntime.jsxs("header", Object.assign({ className: classNames__default['default'](css$3.header, className) }, { children: [jsxRuntime.jsx("h1", { children: children }, void 0),
            showCloseButton && (jsxRuntime.jsx("button", Object.assign({ type: "button", className: css$3.closeButton, onClick: onClose }, { children: "\u2715" }), void 0))] }), void 0));

    const Drawer = ({ className, headerElement, children, open, backdropClassName, header, position, size, hasBackdrop, closeOnEscape, closeOnBackdropClick, disablePadding, showCloseButton, onClose }) => {
        const id = rdk.useId();
        const variant = variants[position];
        const style = {
            width: position === 'start' || position === 'end' ? size : 'auto',
            height: position === 'top' || position === 'bottom' ? size : 'auto'
        };
        return (jsxRuntime.jsx(rdk.GlobalOverlay, Object.assign({ open: open, hasBackdrop: hasBackdrop, closeOnEscape: closeOnEscape, closeOnBackdropClick: closeOnBackdropClick, onClose: onClose, backdropClassName: backdropClassName }, { children: ({ overlayIndex }) => (jsxRuntime.jsx(FocusTrap__default['default'], Object.assign({ focusTrapOptions: {
                    clickOutsideDeactivates: true,
                    escapeDeactivates: true,
                    fallbackFocus: `#${id}`
                } }, { children: jsxRuntime.jsx("div", Object.assign({ id: id, "tab-index": "-1" }, { children: jsxRuntime.jsxs(framerMotion.motion.div, Object.assign({ initial: "initial", animate: "animate", exit: "initial", variants: variant, transition: {
                            duration: 0.5,
                            ease: [0.04, 0.62, 0.23, 0.98],
                            when: 'beforeChildren'
                        }, style: Object.assign(Object.assign({}, style), { zIndex: overlayIndex }), className: classNames__default['default'](css$3.drawer, className, css$3[position], {
                            [css$3.disablePadding]: disablePadding
                        }) }, { children: [(header || headerElement) && (jsxRuntime.jsx(rdk.CloneElement, Object.assign({ element: headerElement, showCloseButton: showCloseButton, onClose: onClose }, { children: header }), void 0)),
                            !header && !headerElement && showCloseButton && (jsxRuntime.jsx("button", Object.assign({ type: "button", className: classNames__default['default'](css$3.closeButton, css$3.headerlessCloseButton), onClick: onClose }, { children: "\u2715" }), void 0)),
                            jsxRuntime.jsx("div", Object.assign({ className: css$3.content }, { children: typeof children === 'function' ? children() : children }), void 0)] }), void 0) }), void 0) }), void 0)) }), void 0));
    };
    Drawer.defaultProps = {
        position: 'end',
        size: '80%',
        hasBackdrop: true,
        closeOnEscape: true,
        closeOnBackdropClick: true,
        disablePadding: false,
        showCloseButton: true,
        headerElement: jsxRuntime.jsx(DrawerHeader, {}, void 0)
    };

    const useDrawer = (prop) => {
        const { open, onClose } = prop || {};
        const [internalOpen, setInternalOpen] = react.useState(open);
        react.useEffect(() => {
            setInternalOpen(open);
        }, [open]);
        const onCloseInternal = react.useCallback(() => {
            setInternalOpen(false);
            onClose === null || onClose === void 0 ? void 0 : onClose();
        }, [onClose]);
        const onToggleOpen = () => {
            setInternalOpen(!internalOpen);
        };
        const Component = react.useCallback((props) => (jsxRuntime.jsx(Drawer, Object.assign({}, props, { open: internalOpen, onClose: onCloseInternal }), void 0)), [internalOpen, onCloseInternal]);
        return {
            isOpen: internalOpen,
            setOpen: setInternalOpen,
            toggleOpen: onToggleOpen,
            Drawer: Component
        };
    };

    var css_248z$4 = ".Menu-module_container__2qx3r {\n  position: relative;\n  padding: 1px;\n  min-width: 112px;\n  max-width: 500px;\n}\n\n  .Menu-module_container__2qx3r .Menu-module_inner__1ulf4:focus {\n      outline: none;\n    }\n";
    var css$4 = {"container":"Menu-module_container__2qx3r","inner":"Menu-module_inner__1ulf4"};
    styleInject(css_248z$4);

    const Menu = react.forwardRef(({ reference, children, style, className, placement, closeOnEscape, open, appendToBody, closeOnBodyClick, maxHeight, autofocus, onClose, onMouseEnter, onMouseLeave }, ref) => {
        const id = rdk.useId();
        return (jsxRuntime.jsx(rdk.ConnectedOverlay, { open: open, closeOnBodyClick: closeOnBodyClick, appendToBody: appendToBody, reference: reference, placement: placement, closeOnEscape: closeOnEscape, content: () => (jsxRuntime.jsxs(framerMotion.motion.div, Object.assign({ ref: ref, initial: { opacity: 0, y: -10 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: -10 }, className: classNames__default['default'](css$4.container, className), style: style, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave }, { children: [autofocus && (jsxRuntime.jsx(FocusTrap__default['default'], Object.assign({ focusTrapOptions: {
                            escapeDeactivates: true,
                            clickOutsideDeactivates: true,
                            fallbackFocus: `#${id}`
                        } }, { children: jsxRuntime.jsx("div", Object.assign({ id: id, className: css$4.inner, tabIndex: -1, style: { maxHeight } }, { children: children }), void 0) }), void 0)),
                    !autofocus && jsxRuntime.jsx("div", Object.assign({ className: css$4.inner }, { children: children }), void 0)] }), void 0)), onClose: onClose }, void 0));
    });
    Menu.defaultProps = {
        placement: 'bottom-start',
        closeOnEscape: true,
        open: false,
        appendToBody: true,
        closeOnBodyClick: true,
        maxHeight: 'max-height: calc(100vh - 48px)',
        autofocus: true
    };

    const useMenu = (prop) => {
        const { open, onClose } = prop || {};
        const [internalOpen, setInternalOpen] = react.useState(open);
        const ref = react.useRef(null);
        react.useEffect(() => {
            setInternalOpen(open);
        }, [open]);
        const onCloseInternal = react.useCallback(() => {
            setInternalOpen(false);
            onClose === null || onClose === void 0 ? void 0 : onClose();
        }, [onClose]);
        const onToggleOpen = react.useCallback(() => {
            setInternalOpen(!internalOpen);
        }, [internalOpen]);
        const Component = react.useCallback((props) => (jsxRuntime.jsx(Menu, Object.assign({}, props, { open: internalOpen, reference: ref, onClose: onCloseInternal }), void 0)), [internalOpen, onCloseInternal]);
        return {
            isOpen: internalOpen,
            setOpen: setInternalOpen,
            toggleOpen: onToggleOpen,
            Menu: Component,
            ref
        };
    };

    const NestedMenu = ({ label, children, style, placement, menuClassName, menuStyle, enterDelay, autofocus, leaveDelay, className, maxHeight, activeClassName, closeOnBodyClick, closeOnEscape, onClose }) => {
        const [active, setActive] = react.useState(false);
        const itemRef = react.useRef(null);
        const menuRef = react.useRef(null);
        const menuEntered = react.useRef(false);
        const enterTimeoutRef = react.useRef(null);
        const leaveTimeoutRef = react.useRef(null);
        const onMouseEnterItem = react.useCallback(() => {
            clearTimeout(enterTimeoutRef.current);
            clearTimeout(leaveTimeoutRef.current);
            enterTimeoutRef.current = setTimeout(() => setActive(true), enterDelay);
        }, [enterDelay]);
        const onClickItem = react.useCallback(() => {
            clearTimeout(enterTimeoutRef.current);
            clearTimeout(leaveTimeoutRef.current);
            setActive(!active);
        }, [active]);
        const onMouseLeaveItem = react.useCallback(() => {
            leaveTimeoutRef.current = setTimeout(() => {
                if (!menuEntered.current) {
                    setActive(false);
                }
            }, leaveDelay);
        }, [leaveDelay]);
        const onMouseEnterMenu = react.useCallback(event => {
            clearTimeout(enterTimeoutRef.current);
            clearTimeout(leaveTimeoutRef.current);
            menuEntered.current = true;
        }, []);
        const onMouseLeaveMenu = react.useCallback(event => {
            clearTimeout(enterTimeoutRef.current);
            clearTimeout(leaveTimeoutRef.current);
            menuEntered.current = false;
            leaveTimeoutRef.current = setTimeout(() => {
                var _a;
                if (!((_a = itemRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
                    setActive(false);
                }
            }, leaveDelay);
        }, [leaveDelay]);
        const onNestedMenuClose = react.useCallback(event => {
            setActive(false);
            onClose === null || onClose === void 0 ? void 0 : onClose(event);
        }, [onClose]);
        return (jsxRuntime.jsxs(react.Fragment, { children: [jsxRuntime.jsx("div", Object.assign({ className: classNames__default['default'](className, { [activeClassName]: active }), style: style, ref: itemRef, onClick: onClickItem, onMouseEnter: onMouseEnterItem, onMouseLeave: onMouseLeaveItem }, { children: label }), void 0),
                jsxRuntime.jsx(Menu, Object.assign({ className: menuClassName, autofocus: autofocus, style: menuStyle, reference: itemRef, closeOnBodyClick: closeOnBodyClick, closeOnEscape: closeOnEscape, open: active, placement: placement, maxHeight: maxHeight, ref: menuRef, onMouseEnter: onMouseEnterMenu, onMouseLeave: onMouseLeaveMenu, onClose: onNestedMenuClose }, { children: children }), void 0)] }, void 0));
    };
    NestedMenu.defaultProps = {
        autofocus: true,
        placement: 'right-start',
        closeOnEscape: true,
        closeOnBodyClick: true,
        enterDelay: 0,
        leaveDelay: 100
    };

    var css_248z$5 = ".ContextMenu-module_open__3esLx {\n  outline: 1px dotted var(--color-button-success);\n}\n\n.ContextMenu-module_enabled__2EoAH {\n  cursor: context-menu;\n}\n";
    var css$5 = {"open":"ContextMenu-module_open__3esLx","enabled":"ContextMenu-module_enabled__2EoAH"};
    styleInject(css_248z$5);

    const useGlobalMenuState = creteGlobalStateHook__default['default']([]);
    const ContextMenu = (_a) => {
        var { children, content, disabled, autofocus, autoClose } = _a, rest = __rest(_a, ["children", "content", "disabled", "autofocus", "autoClose"]);
        const id = rdk.useId();
        const [menus, setMenus] = useGlobalMenuState();
        const [open, setOpen] = react.useState(false);
        const onOpen = react.useCallback(() => {
            if (!disabled) {
                menus.forEach(m => m(false));
                setOpen(true);
                setMenus([setOpen]);
            }
        }, [disabled, setOpen, setMenus, menus]);
        const closeAllMenus = react.useCallback(() => {
            setOpen(false);
            setMenus([]);
        }, [setOpen, setMenus]);
        const onClose = react.useCallback(() => {
            closeAllMenus();
        }, [closeAllMenus]);
        react.useEffect(() => {
            if (open) {
                closeAllMenus();
            }
        }, []);
        return (jsxRuntime.jsx(rdk.ConnectedOverlay, Object.assign({ placement: "bottom-start", triggerElement: "span" }, rest, { triggerClassName: classNames__default['default']({
                [css$5.open]: open,
                [css$5.enabled]: !disabled
            }), trigger: "contextmenu", open: open, content: () => (jsxRuntime.jsxs(framerMotion.motion.div, Object.assign({ initial: { opacity: 0, y: -25 }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: -25 }, onClick: () => autoClose && (onClose === null || onClose === void 0 ? void 0 : onClose()) }, { children: [autofocus && (jsxRuntime.jsx(FocusTrap__default['default'], Object.assign({ focusTrapOptions: {
                            escapeDeactivates: true,
                            clickOutsideDeactivates: true,
                            fallbackFocus: `#${id}`
                        } }, { children: jsxRuntime.jsx("div", Object.assign({ id: id, tabIndex: -1 }, { children: content }), void 0) }), void 0)), !autofocus && content] }), void 0)), onOpen: onOpen, onClose: onClose }, { children: children }), void 0));
    };
    ContextMenu.defaultProps = {
        autofocus: true,
        autoClose: true,
        closeOnEscape: true,
        closeOnBodyClick: true
    };

    var css_248z$6 = ".Notification-module_notification__2_F1t {\n  display: flex;\n  position: relative;\n  font-size: 16px;\n  min-width: 400px;\n  padding: 10px;\n  min-height: 45px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n  background: var(--color-notification);\n  color: var(--color-on-notification);\n  border: 1px solid var(--color-notification-border);\n}\n\n  .Notification-module_notification__2_F1t .Notification-module_contentContainer__Ox0Q2 {\n    display: flex;\n    width: 100%;\n    padding: 0 15px;\n  }\n\n  .Notification-module_notification__2_F1t.Notification-module_error__1Gebb .Notification-module_header__248Dx {\n      color: var(--color-notification-error);\n    }\n\n  .Notification-module_notification__2_F1t.Notification-module_warning__RD1Ww .Notification-module_header__248Dx {\n      color: var(--color-notification-warning);\n    }\n\n  .Notification-module_notification__2_F1t.Notification-module_success__1OqpE .Notification-module_header__248Dx {\n      color: var(--color-notification-success);\n    }\n\n  .Notification-module_notification__2_F1t .Notification-module_close__3BFzV,\n  .Notification-module_notification__2_F1t .Notification-module_content__1V0vh {\n    display: inline-flex;\n    align-items: center;\n  }\n\n  .Notification-module_notification__2_F1t .Notification-module_content__1V0vh {\n    flex: 1;\n    padding: 3px 10px;\n    flex-direction: column;\n    text-align: center;\n    justify-content: center;\n  }\n\n  .Notification-module_notification__2_F1t .Notification-module_content__1V0vh .Notification-module_header__248Dx {\n      font-size: 18px;\n    }\n\n  .Notification-module_notification__2_F1t .Notification-module_content__1V0vh .Notification-module_body__1aADs {\n      color: var(--color-on-notification);\n      opacity: 0.7;\n      font-size: 14px;\n      margin-top: 5px;\n    }\n\n  .Notification-module_notification__2_F1t .Notification-module_close__3BFzV .Notification-module_closeButton__286ko {\n      background: none;\n      border: none;\n      padding: 5px 10px;\n      font-size: 13px;\n      font-weight: 600;\n      opacity: 0.7;\n      margin: 0;\n      color: var(--color-on-notification);\n    }\n";
    var css$6 = {"notification":"Notification-module_notification__2_F1t","contentContainer":"Notification-module_contentContainer__Ox0Q2","error":"Notification-module_error__1Gebb","header":"Notification-module_header__248Dx","warning":"Notification-module_warning__RD1Ww","success":"Notification-module_success__1OqpE","close":"Notification-module_close__3BFzV","content":"Notification-module_content__1V0vh","body":"Notification-module_body__1aADs","closeButton":"Notification-module_closeButton__286ko"};
    styleInject(css_248z$6);

    const Notification = ({ id, title, showClose, body, timeout, className, variant, onClose }) => {
        const timeoutRef = react.useRef(null);
        const clearTimer = react.useCallback(() => clearTimeout(timeoutRef.current), []);
        const startTimer = react.useCallback(() => {
            clearTimer();
            timeoutRef.current = setTimeout(() => onClose === null || onClose === void 0 ? void 0 : onClose(id), timeout);
        }, [id, timeout, onClose, clearTimer]);
        react.useEffect(() => {
            startTimer();
            return () => clearTimer();
        }, [clearTimer, startTimer]);
        return (jsxRuntime.jsxs(framerMotion.motion.div, Object.assign({ layout: true, initial: { opacity: 0, y: 50, scale: 0.5 }, animate: { opacity: 1, y: 0, scale: 1 }, exit: { opacity: 0, scale: 0.5, transition: { duration: 0.2 } }, className: classNames__default['default'](css$6.notification, className, {
                [css$6.default]: variant === 'default',
                [css$6.error]: variant === 'error',
                [css$6.success]: variant === 'success',
                [css$6.warning]: variant === 'warning'
            }), onMouseEnter: clearTimer, onMouseLeave: startTimer }, { children: [jsxRuntime.jsxs("div", Object.assign({ className: css$6.content }, { children: [title && jsxRuntime.jsx("div", Object.assign({ className: css$6.header }, { children: title }), void 0),
                        body && (jsxRuntime.jsx("div", Object.assign({ className: css$6.body }, { children: typeof body === 'string' ? (jsxRuntime.jsx("span", { dangerouslySetInnerHTML: { __html: body } }, void 0)) : (body) }), void 0))] }), void 0),
                jsxRuntime.jsx("div", Object.assign({ className: css$6.close }, { children: showClose && (jsxRuntime.jsx("button", Object.assign({ type: "button", className: css$6.closeButton, variant: "text", onClick: () => onClose === null || onClose === void 0 ? void 0 : onClose(id) }, { children: "\u2715" }), void 0)) }), void 0)] }), void 0));
    };

    const NotificationsContext = react.createContext({
        notify: () => undefined,
        notifyError: () => undefined,
        notifyWarning: () => undefined,
        notifySuccess: () => undefined,
        clearNotification: () => undefined,
        clearAllNotifications: () => undefined
    });

    var css_248z$7 = ".Notifications-module_container__TEo61 .Notifications-module_positions__4Urko {\n    position: fixed;\n    z-index: 9998;\n    height: auto;\n    left: 50%;\n    transform: translateX(-50%);\n    bottom: 0;\n    padding: 0 95px;\n    margin-bottom: 5px;\n  }\n\n    .Notifications-module_container__TEo61 .Notifications-module_positions__4Urko > div {\n      margin: 10px 0 15px 0;\n    }\n";
    var css$7 = {"container":"Notifications-module_container__TEo61","positions":"Notifications-module_positions__4Urko"};
    styleInject(css_248z$7);

    // Hacky way to track unique versions of a notification
    let nextId = 0;
    const Notifications = ({ children, limit, timeout, showClose, preventFlooding }) => {
        const [notifications, setNotifications] = react.useState([]);
        const clearNotification = react.useCallback((id) => setNotifications(notifications.filter(n => n.id !== id)), [notifications]);
        const clearAllNotifications = react.useCallback(() => setNotifications([]), []);
        const notify = react.useCallback((title, options = {}) => {
            // If we are flooded with the same message over and over,
            // dont add more of the same type. Mainly used for error use cases.
            if (preventFlooding) {
                const has = notifications.find(n => n.title === title);
                if (has) {
                    return false;
                }
            }
            const id = nextId++;
            const obj = Object.assign({ title,
                id, variant: 'default', timeout,
                showClose }, options);
            const sorted = [obj, ...notifications];
            // Clear old notifications if we hit limit
            if (sorted.length >= limit) {
                sorted.pop();
            }
            // Update the container instance
            setNotifications(sorted);
            return id;
        }, [limit, notifications, preventFlooding, showClose, timeout]);
        const notifyError = react.useCallback((title, options = {}) => notify(title, Object.assign(Object.assign({}, options), { variant: 'error' })), [notify]);
        const notifyWarning = react.useCallback((title, options = {}) => notify(title, Object.assign(Object.assign({}, options), { variant: 'warning' })), [notify]);
        const notifySuccess = react.useCallback((title, options = {}) => notify(title, Object.assign(Object.assign({}, options), { variant: 'success' })), [notify]);
        const values = react.useMemo(() => ({
            notify,
            notifyError,
            notifyWarning,
            notifySuccess,
            clearNotification,
            clearAllNotifications
        }), [
            clearNotification,
            clearAllNotifications,
            notify,
            notifyError,
            notifySuccess,
            notifyWarning
        ]);
        return (jsxRuntime.jsxs(react.Fragment, { children: [jsxRuntime.jsx(NotificationsContext.Provider, Object.assign({ value: values }, { children: children }), void 0),
                jsxRuntime.jsx("div", Object.assign({ className: css$7.container }, { children: jsxRuntime.jsx("div", Object.assign({ className: css$7.positions }, { children: jsxRuntime.jsx(framerMotion.AnimatePresence, { children: !!notifications.length && (jsxRuntime.jsx(framerMotion.motion.div, Object.assign({ initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 } }, { children: notifications.map(n => (react.createElement(Notification, Object.assign({}, n, { key: n.id, onClose: clearNotification })))) }), void 0)) }, void 0) }), void 0) }), void 0)] }, void 0));
    };
    Notifications.defaultProps = {
        limit: 10,
        timeout: 4000,
        showClose: true,
        preventFlooding: true
    };

    const useNotification = () => {
        const context = react.useContext(NotificationsContext);
        if (context === undefined) {
            throw new Error('`useNotification` hook must be used within a `NotificationsContext` component');
        }
        return context;
    };

    exports.ContextMenu = ContextMenu;
    exports.Dialog = Dialog;
    exports.DialogHeader = DialogHeader;
    exports.Drawer = Drawer;
    exports.DrawerHeader = DrawerHeader;
    exports.Menu = Menu;
    exports.NestedMenu = NestedMenu;
    exports.Notifications = Notifications;
    exports.NotificationsContext = NotificationsContext;
    exports.Popover = Popover;
    exports.Tooltip = Tooltip;
    exports.useDialog = useDialog;
    exports.useDrawer = useDrawer;
    exports.useMenu = useMenu;
    exports.useNotification = useNotification;
    exports.useTooltipState = useTooltipState;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
